#!/bin/bash source-this-script
set -o pipefail
shopt -qs nullglob

: ${SOMETHINGBENCHMARK_SUBJECT_NAME:?}
: ${SOMETHINGBENCHMARK_SUBJECT_UNIT:?}	# Can be multiple units separated by tabstops.
: ${SOMETHINGBENCHMARK_RECORD_FILESPEC:?}
: ${SOMETHINGBENCHMARK_KEY_COMMAND:=readableHostname}
: ${SOMETHINGBENCHMARK_KEY_NAME:=hostname}
: ${SOMETHINGBENCHMARK_KEY_OVERRIDE=HOSTNAME}
: ${SOMETHINGBENCHMARK_CONTEXT_NAME:=distro}
: ${SOMETHINGBENCHMARK_CONTEXT_COMMAND:=distro}
: ${SOMETHINGBENCHMARK_SYSTEM_NAME:=system info}
: ${SOMETHINGBENCHMARK_SYSTEM_COMMAND:=systeminfo 'Product Name'}
: ${SOMETHINGBENCHMARK_CURRENT_PREFIX=[07m}
: ${SOMETHINGBENCHMARK_CURRENT_SUFFIX=[0m}
: ${SOMETHINGBENCHMARK_ENVIRONMENT_VARIABLES:=''}
: ${SOMETHINGBENCHMARK_ADDITIONAL_ARGUMENTS_SHORT:=''}
: ${SOMETHINGBENCHMARK_ADDITIONAL_ARGUMENTS_LONG:=''}

# Clients have to implement:
#benchmarkRound()
#{
#   # Can return multiple values separated by tabstops. The count needs to
#   # correspond to the number of fields in SOMETHINGBENCHMARK_SUBJECT_UNIT for
#   # averaging to work.
#   echo 42
#}

# Clients may implement:
#benchmarkPrepare()
#{
#   # Can do preparation steps done once before all benchmark rounds.
#   # Benchmarking will abort if this fails.
#}
#recordPrepare()
#{
#   # Can do preparation steps done once before working with records.
#   # The record operation will abort if this fails.
#}

readonly recordDirspec="$(dirname -- "$SOMETHINGBENCHMARK_RECORD_FILESPEC")"
readonly recordFilename="$(basename -- "$SOMETHINGBENCHMARK_RECORD_FILESPEC")"
readonly inboxDirspec=${INBOX_DIR:-~/inbox}
readonly inboxFilenameBase="$(basename -- "$0")"
readonly inboxFilespecPrefix="${inboxDirspec}/${inboxFilenameBase}_"

printShortUsage()
{
    local multipleSubjectSortArgs; [[ "$SOMETHINGBENCHMARK_SUBJECT_UNIT" =~ $'\t' ]] && multipleSubjectSortArgs='[-k|--sort-column N]'
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf "Usage: ${SOMETHINGBENCHMARK_KEY_OVERRIDE:+[}${SOMETHINGBENCHMARK_KEY_OVERRIDE}${SOMETHINGBENCHMARK_KEY_OVERRIDE:+=...] }%q %s\\n" "$(basename "$1")" "[-n|--count COUNT] [-v|--verbose] [-C|--compare${multipleSubjectSortArgs:+ }${multipleSubjectSortArgs}] [-R|--record|-I|--record-to-inbox]${SOMETHINGBENCHMARK_ADDITIONAL_ARGUMENTS_SHORT:+ }${SOMETHINGBENCHMARK_ADDITIONAL_ARGUMENTS_SHORT} [-?|-h|--help]"
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--merge-record|-M RECORD-FILE [FILE2 ...] | --merge-inbox-records'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "-l|--list${multipleSubjectSortArgs:+ }${multipleSubjectSortArgs}"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    local subjectUnitPronoun=a
    local subjectUnitPlural; [[ "$SOMETHINGBENCHMARK_SUBJECT_UNIT" =~ $'\t' ]] && { subjectUnitPronoun=''; subjectUnitPlural=s; }
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Run a $SOMETHINGBENCHMARK_SUBJECT_NAME and return ${subjectUnitPronoun}${subjectUnitPronoun:+ }${SOMETHINGBENCHMARK_SUBJECT_UNIT//	/, } number${subjectUnitPlural}.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --count|-n COUNT	Run this COUNT times and print the average.
    --verbose|-v	Print the full benchmark information in addition to the
			${SOMETHINGBENCHMARK_SUBJECT_UNIT//	/ / } number${subjectUnitPlural}.
    --compare|-C	Compare the result with other, previously recorded
			${SOMETHINGBENCHMARK_KEY_NAME} records.
    --record|-R		Store the result for future comparisons.
    --record-to-inbox|-I
			Store the result in the inbox location (so that it can
			be incorporated into the records via --merge-record).
    --merge-record|-M RECORD-FILE [FILE2 ...]
			Incorporate benchmark results from RECORD-FILE(s) for
			future comparisons.
    --merge-inbox-records
			Incorporate all benchmark results found in the local
			inbox location.
    --list|-l		Just print all previously recorded
			${SOMETHINGBENCHMARK_KEY_NAME} records in sorted order
			(from lowest to highest rating) without running a new
			benchmark.${subjectUnitPlural:+
    --sort-column|-k N	Sort by data column N instead of the first.}
HELPTEXT
    [ -n "$SOMETHINGBENCHMARK_ADDITIONAL_ARGUMENTS_LONG" ] && printf '%s\n' "$SOMETHINGBENCHMARK_ADDITIONAL_ARGUMENTS_LONG"
}

action=benchmark
typeset -a mergeRecordFilespecs=()
count=1
typeset -a averageCommand=()
typeset -a summaryCommand=(); [ -t 1 ] && summaryCommand=(eval 'tee >(sampleLines --inline-always --clear --count result >/dev/tty)')
typeset -a verboseCommand=()
isCompare=
isRecord=
isRecordToInbox=
sortDataColumn=1
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--count|-n)	shift; count="$1"; shift; averageCommand=(getAverages);;
	--verbose|-v)	shift; summaryCommand=(); verboseCommand=(tee /dev/stderr);;
	--compare|-C)	shift; isCompare=t;;
	--record|-R)	shift; isRecord=t;;
	--record-to-inbox|-I)
			shift; isRecord=t; isRecordToInbox=t;;
	--merge-record|-M)
			shift
			if [ $# -eq 0 ]; then
			    printUsage >&2 "$0"
			    exit 2
			fi
			action=merge
			mergeRecordFilespecs=("$@")
			set --
			break
			;;
	--merge-inbox-records)
			shift; action=mergeInboxRecords;;
	--list|-l)	shift; action=listRecords;;
	--sort-column|-k)
			shift; sortDataColumn="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
[ $count -le 1 ] && summaryCommand=()

runBenchmarks()
{
    ! type -t benchmarkPrepare >/dev/null || benchmarkPrepare || return $?

    for ((i = 0; i < count; i++))
    do
	benchmarkRound
    done
}

database()
{
    local key="${SOMETHINGBENCHMARK_KEY_NAME//[^0-9A-Za-z]/_}"
    local unit="${SOMETHINGBENCHMARK_SUBJECT_UNIT//[^0-9A-Za-z$'\t']/_}"
    local context="${SOMETHINGBENCHMARK_CONTEXT_NAME//[^0-9A-Za-z]/_}"
    local system="${SOMETHINGBENCHMARK_SYSTEM_NAME//[^0-9A-Za-z]/_}"

    miniDB --basedir "$recordDirspec" --schema "${key^^} ${unit^^} DATE ${context^^} ${system^^}" --table "$recordFilename" "$@"
}

didPrepareRecord=
makeRecord()
{
    [ "$didPrepareRecord" ] || ! type -t recordPrepare >/dev/null || recordPrepare || return $?
    didPrepareRecord=t

    local result="${1:?}"; shift
    printf '%s\t%s\t%s\t%s\t%s\n' "$($SOMETHINGBENCHMARK_KEY_COMMAND)" "$result" "$(date +%F)" "$($SOMETHINGBENCHMARK_CONTEXT_COMMAND)" "$($SOMETHINGBENCHMARK_SYSTEM_COMMAND)"
}

printExistingRecords()
{
    database --command 'if [ -r {} ]; then tail -n +2 {}; else echo >&2 "No records exist yet."; exit 1; fi'
}
sortAndTabularizeRecords()
{
    local sortColumn=$((sortDataColumn + 1))
    sort --numeric-sort --field-separator $'\t' --key "${sortColumn},${sortColumn}" | \
    column -s $'\t' -t
}
typeset -a pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=()
compareWithRecords()
{
    local result="${1:?}"; shift
    local currentRecord; currentRecord="$(makeRecord "$result")" || return $?
    local currentRecordPattern="$(printf %s "$currentRecord" | sed -e 's/^/^/' -e 's/\t/[[:space:]]\\+/g' -e 's/$/\$/')"
    {
	printf '%s\n' "$currentRecord"
	printExistingRecords
    } | \
	sortAndTabularizeRecords | \
	eval 'highlight-pattern --full-lines ${SOMETHINGBENCHMARK_CURRENT_PREFIX:+--color "$SOMETHINGBENCHMARK_CURRENT_PREFIX"} ${SOMETHINGBENCHMARK_CURRENT_SUFFIX:+--color-off "$SOMETHINGBENCHMARK_CURRENT_SUFFIX"} -- "$currentRecordPattern"' "${pager:+|}" '"${pager[@]}"'
}
listRecords()
{
    printExistingRecords | \
	eval sortAndTabularizeRecords "${pager:+|}" '"${pager[@]}"'
}

recordBenchmark()
{
    local result="${1:?}"; shift
    local record; record="$(makeRecord "$result")" || return $?
    if [ "$isRecordToInbox" ]; then
	printf '%s\n' "$record" | inbox --base "$inboxFilenameBase"
    else
	database --update "$record"
    fi
}

merge()
{
    local status=0
    local mergeRecordFilespec
    for mergeRecordFilespec in "${mergeRecordFilespecs[@]}"
    do
	typeset -a records=()
	readarray -t records < "$mergeRecordFilespec" || exit $?

	local record
	for record in "${records[@]}"
	do
	    database --update "$record" && \
		printf 'Added/updated record for %s.\n' "${record%%$'\t'*}" || \
		status=$?
	done

	if [ $status -eq 0 ] && [ -f "$mergeRecordFilespec" ] && offerTo "Delete $(basename -- "$mergeRecordFilespec") after successful merge?"; then
	    rm --force -- "$mergeRecordFilespec" || status=$?
	fi
    done

    return $status
}

mergeInboxRecords()
{
    if [ ! -d "$inboxDirspec" ]; then
	printf >&2 'ERROR: No local inbox at %s.\n' "$inboxDirspec"
	exit 1
    fi
    typeset -a mergeRecordFilespecs=("$inboxFilespecPrefix"*)
    if [ ${#mergeRecordFilespecs[@]} -eq 0 ]; then
	echo >&2 'ERROR: No records found in local inbox.'
	exit 1
    fi
    merge
}

getAverages()
{
    local tabChars="${SOMETHINGBENCHMARK_SUBJECT_UNIT//[^$'\t']}"
    local fieldCount=$((${#tabChars} + 1))
    typeset -a datamashArgs=()
    local i; for ((i = 1; i <= fieldCount; i++))
    do
	datamashArgs+=(mean "$i")
    done

    datamash "${datamashArgs[@]}"
}

benchmark()
{
    local result
    result=$(eval 'runBenchmarks' "${summaryCommand:+|}" '"${summaryCommand[@]}"' "${averageCommand:+|}" '"${averageCommand[@]}"') || return $?

    local status=0
    [ ! "$isCompare" ] || compareWithRecords "$result" || status=$?
    [ ! "$isRecord" ] || recordBenchmark "$result" || status=$?
    [ "$isCompare" ] || printf '%s\n' "$result"
    return $status
}

$action
